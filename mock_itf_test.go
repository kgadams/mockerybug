// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockerybug

import (
	mock "github.com/stretchr/testify/mock"
)

// newMockItf creates a new instance of mockItf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockItf(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockItf {
	mock := &mockItf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockItf is an autogenerated mock type for the itf type
type mockItf struct {
	mock.Mock
}

type mockItf_Expecter struct {
	mock *mock.Mock
}

func (_m *mockItf) EXPECT() *mockItf_Expecter {
	return &mockItf_Expecter{mock: &_m.Mock}
}

// Use provides a mock function for the type mockItf
func (_mock *mockItf) Use(structParam *Struct) {
	_mock.Called(structParam)
	return
}

// mockItf_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type mockItf_Use_Call struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
//   - structParam *Struct
func (_e *mockItf_Expecter) Use(structParam interface{}) *mockItf_Use_Call {
	return &mockItf_Use_Call{Call: _e.mock.On("Use", structParam)}
}

func (_c *mockItf_Use_Call) Run(run func(structParam *Struct)) *mockItf_Use_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Struct
		if args[0] != nil {
			arg0 = args[0].(*Struct)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockItf_Use_Call) Return() *mockItf_Use_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockItf_Use_Call) RunAndReturn(run func(structParam *Struct)) *mockItf_Use_Call {
	_c.Run(run)
	return _c
}
